
üí†HTTP y rutas en Node.jsüí†
............................

Modelo Cliente-Servidor
-----------------------

¬øQu√© es el Modelo Cliente-Servidor?
-----------------------------------

Es un modelo que usamos para acceder a internet y obtener recursos e informaci√≥n.

¬øQu√© es un CLIENTE?
-------------------

Es el navegador desde el cual se realizan solicitudes a un servidor.

¬øQu√© es un SERVIDOR?

Es el programa que se ejecuta en un servidor f√≠sco para ofrecer un servicio al cliente. Env√≠a informaci√≥n.

Nota1üóíÔ∏è: El servidor conoce el formato esperado del mensaje que env√≠a el cliente.
Nota2üóíÔ∏è: El protocolo HTTP define el formato de los mensajes.

¬øQu√© es un PROTOCOLO?
---------------------

Es un conjunto de reglas que permiten transmitir informaci√≥n entre los dispositivos de una red.

¬øQu√© es HTTP(HyperText Transfer Protocol/Protocolo de Transferencia de HiperTexto)?
-----------------------------------------------------------------------------------

Es el protocolo de comunicaci√≥n utilizado en la World Wide Web para la transferencia de datos entre clientes y servidores web.

Solicitudes HTTP(request)
-------------------------

Se dividen en las siguientes solicitudes:
üü¢M√©todos HTTP.
üü¢Camino(path).
üü¢Versi√≥n de HTTP.
üü¢Cabeceras(headers): Proveen informaci√≥n adicional sobre la solicitud.
üü¢Cuerpo(body): Contiene la informaci√≥n que debe ser enviada al servidor para procesar la solicitud.

NotaüóíÔ∏è: No se incluye en todas las solicitudes. Solo en aquellas que requieran enviar informaci√≥n. Por ejemplo: POST, PUT.

M√©todos HTTP
------------

¬øQu√© es un M√©todo HTTP?
-----------------------

Es un verbo o sustantivo que indica la intenci√≥n de la solicitud.

NotaüóíÔ∏è: Aunque tambi√©n pueden ser sustantivos, frecuentemente se les denomina como "Verbos HTTP".

LISTA DE SOLICITUDES:
üü¢GET: Verbo para solicitar un recurso espec√≠fico. Ej: Un archivo HTML, CSS o una imagen.
üü¢POST: Verbo para crear un recurso espec√≠fico. Ej: Agregar un usuario nuevo a una base de datos.
üü¢PUT: Verbo para modificar un recurso espec√≠fico. Ej: Hacer un cambio en la base de datos.
üü¢DELETE: Verbo para eliminar un recurso espec√≠fico. Ej: Eliminar un usuario de una base de datos.
üü¢Otros...

Respuestas HTTP(response/Respuesta)
-----------------------------------

Se dividen en las siguientes respuestas:
üü¢C√≥digo de estado
üü¢Texto de estado
üü¢Versi√≥n de HTTP
üü¢Cabeceras(headers): Son opcionales y proveen informaci√≥n adicional sobre la respuesta.
üü¢Cuerpo(body): Contiene la informaci√≥n que debe ser enviada desde el servidor hacia el cliente.


C√≥didos de Estado HTTP
----------------------

¬øQu√© es un C√≥digo de Estado HTTP?
---------------------------------

Es un n√∫mero que indican si se ha completado exitosamente(O no) la solicitud HTTP. Las respuestas se agrupan en cinco clases:
‚ö´Respuestas informativas(100-199).
‚ö´Respuestas satisfactorias(200-299).
‚ö´Redirecciones(300-399).
‚ö´Errores de los clientes(400-499).
‚ö´Errores de los servidores(500-599).

NotaüóíÔ∏è: Con Node.js y Express podemos especificar el c√≥digo de estado de la respuesta HTTP en nuestro servidor.

Contenidos de Datos M√°s Comunes
-------------------------------

üü¢200 OK - La respuesta fue exitosa.
üü¢400 Bad Request - El servidor no pudo interpretar la solicitud.
üü¢404 Not Found - El servidor no pudo encontrar el recurso solicitado.
üü¢500 Internal Server Error - El servidor encontr√≥ una situaci√≥n que no sabe c√≥mo manejar.

M√≥dulo HTTP
-----------

¬øQu√© es un M√≥dulo HTTP?
-----------------------

Este m√≥dulo le permite a Node.js transmitir informaci√≥n con el protocolo HTTP.

¬øQu√© es un PUERTO?
------------------

Ubicaci√≥n virtual del sistema operativo en la cual se puede acceder a una aplicaci√≥n o a un proceso espec√≠fico que se est√© ejecutando en ese puerto.

Ej:

const http = require("http");

const servidor = http.createServer((req, res) => {
  // Proceso
  console.log("Solicitud nueva");
  res.end("Hola, mundo");
});

const PUERTO = 3000;

servidor.listen(PUERTO, () => {
  console.log(
    `El servidor esta escuchando en el puerto http://localhost:${PUERTO}...`
  );
});

req y res
---------

req y res son objetos utilizados en aplicaciones web con Node.js y Express, donde req representa la solicitud del cliente al servidor y res representa la respuesta del servidor al cliente.

Ej: 

const servidor = http.createServer((req, res) => { // Crea un servidor HTTP y define una funci√≥n de callback que se ejecutar√° cada vez que se reciba una solicitud.
  console.log("==> req (solicitud)");
  console.log(req); // Imprime el objeto de solicitud (req), que contiene informaci√≥n sobre la solicitud del cliente.
  console.log(req.url); // Imprime la URL solicitada por el cliente.
  console.log(req.method); // Imprime el m√©todo HTTP utilizado en la solicitud (GET, POST, etc.).
  console.log(req.headers); // Imprime los encabezados de la solicitud HTTP enviados por el cliente.
  console.log(res); // Imprime el objeto de respuesta (res), que se utilizar√° para enviar una respuesta al cliente.
  console.log(res.statusCode); // 200 OK // Imprime el c√≥digo de estado de la respuesta actual (por defecto es 200 OK).
  res.statusCode = 404; // Establece el c√≥digo de estado de la respuesta a 404 (Not Found).
  console.log(res.statusCode); // 404 Not Found // Imprime el nuevo c√≥digo de estado de la respuesta.
  res.setHeader("content-type", "application/json"); // Establece el encabezado "content-type" de la respuesta a "application/json".
  console.log(res.getHeaders()); // Imprime los encabezados de la respuesta actual.
  res.end("Hola, mundo :)"); // Env√≠a una respuesta al cliente con el contenido "Hola, mundo :)" y finaliza la conexi√≥n.
});


Estructura de una URL
---------------------

¬øQu√© es una URL(Uniform Resource Locator/Localizador Uniforme de Recursos)?
---------------------------------------------------------------------------

Es una direcci√≥n de un recurso en la web.

Ej: https://www.freecodecamp.org/espanol/
     |       |       |        |       |
     v       v       v	      v       v
Protocolo Subdominio Dominio Dominio  Camino(Path)
			     de Nivel
			     Superior
			     TLD(Top-Level Domain)

NotaüóíÔ∏è: Otros dominios de nivel superior pueden ser .com, .net, .int, .edu, .gov, entre otros.

¬øQu√© es un SUBDOMINIO?
----------------------

Es la informaci√≥n adicional agregada al inicio del dominio de una p√°gina web.

NotaüóíÔ∏è: Permite a los sitios web organizar y separar la informaci√≥n para distintos prop√≥sitos.

¬øQu√© es un DOMINIO?
-------------------

Referencia √∫nica a un sitio web en internet.

¬øQu√© es un CAMINO(PATH)?
------------------------

Archivo o directorio en el servidor web.

NotaüóíÔ∏è: Puede tener par√°metros para personalizarlo. Estos par√°metros son parte de la URL.

Tipos de Par√°metros
-------------------

https://www.ejemplo.org/usuarios/14
		       ............
		          |										        
			  v
                     Par√°metro de ruta

			   Clave  Valor
                              ^     ^
			      |     |
			      . ..............
https://www.google.com/search?q=cursos+de+node
			      ................
			     	    |
			     	    v
		     	     Par√°metros query

¬øQu√© son los PAR√ÅMETROS QUERY(QUERY STRING)?
--------------------------------------------

Son par√°metros usados para contener contenido din√°mico. Por ejemplo, filtrar una lista de recursos.

NotaüóíÔ∏è: Tambi√©n se les conoce como "query string".

Ej: https://www.ejemplo.org/search?categoria=programacion

Varios Par√°metros Query
-----------------------

Clave		Clave    Clase
 ^		 ^        ^
 |		 |        |
 .               .        .
?q=cursos+de+node&sourceid&chrome&ie=UTF-8
  ............... ........ ...............
         |           |          |
         v           v          v
       Valor       Valor       Valor

NotaüóíÔ∏è: Usamos par√°metros query para filtrar solicitudes GET(Para obtener recursos espec√≠ficos).

Declaraciones para la URL
-------------------------

const miURL = new URL(
  "https://www.ejemplo.org/cursos/programacion?ordenar=vistas&nivel=1"
); // Nombre la URL

console.log(miURL.protocol); // https:
console.log(miURL.hostname); // www.ejemplo.org
console.log(miURL.pathname); // cursos/programacion
console.log(miURL.searchParams); // URLSearchParams { 'ordenar' => 'vistas', 'nivel' => '1' }
console.log(typeof miURL.searchParams); // object
console.log(miURL.searchParams.get("ordenar")); // vistas
console.log(miURL.searchParams.get("nivel")); // 1

Routing en Node.js
------------------

¬øQu√© es ROUTING?
----------------

Es un proceso para manejar las solicitudes del cliente en base a ciertos criterios. Estos criterios son:
üü¢El m√©todo de la solicitud HTTP: De est√° forma el servidor sabe qu√© tipo de operaci√≥n se realizar√°.
üü¢El path(Camino) de la solicitud HTTP: De est√° forma el servidor sabe el recurso espec√≠fico que se usar√°, modificar o eliminar.

Ej: 

//routingServer.js

const http = require("http");
const { infoCursos } = require("./cursos.js");

const servidor = http.createServer((req, res) => {
  const metodo = req.method;

  switch (metodo) {
    case "GET":
      return manejarSolicitudGET(req, res);
    case "POST":
      return manejarSolicitudPOST(req, res);
    default:
      res.statusCode = 501;
      console.log(
        `El m√©todo no puede ser manejado por el servidor: ${method}...`
      );
      break;
  }
});

function manejarSolicitudGET(req, res) {
  const camino = req.url;

  console.log(res.statusCode); // 200 OK

  if (camino === "/") {
    res.writeHead(400, { "Content-Type": "application/json" });
    return res.end(
      "Bienvenidos a mi primer servidor y API creados con Node.js"
    );
  } else if (camino === "/cursos") {
    return res.end(JSON.stringify(infoCursos));
  } else if (camino === "/cursos/programacion") {
    return res.end(JSON.stringify(infoCursos.programacion));
  } else if (camino === "/cursos/matematicas") {
    return res.end(JSON.stringify(infoCursos.matematicas));
  } else {
    res.statusCode = 404;
    return res.end("El recurso solicitado no existe...");
  }
}

function manejarSolicitudPOST(req, res) {
  const path = req.url;

  if (path === "/cursos/programacion") {
    let cuerpo = "";
    req.on("data", (contenido) => {
      cuerpo += contenido.toString();
    });
    req.on("end", () => {
      console.log(cuerpo);
      console.log(typeof cuerpo);

      // Convertir a un objeto de JavaScript
      cuerpo = JSON.parse(cuerpo);
      console.log(typeof cuerpo);
      console.log(cuerpo.titulo);
      res.end("El servidor recibido una solicitud POST para /cursos/programacion");
    });
    //return res.end("El servidor recibido una solicitud POST para /cursos/programacion");
  }
}

const PUERTO = 3000;

servidor.listen(PUERTO, () => {
  console.log(`El servidor esta escuchando en el puerto ${PUERTO}...`);
});

//cursos.js

let infoCursos = {
  programacion: [
    {
      id: 1,
      titulo: "Aprende Python",
      lenguaje: "python",
      vistas: 15000,
      nivel: "basico",
    },
    {
      id: 2,
      titulo: "Python intermedio",
      lenguaje: "python",
      vistas: 13553,
      nivel: "intermedio",
    },
    {
      id: 3,
      titulo: "Aprende JavaScript",
      lenguaje: "javascript",
      vistas: 102223,
      nivel: "basico",
    },
  ],
  matematicas: [
    {
      id: 1,
      titulo: "Aprende calculo",
      tema: "calculo",
      vistas: 12427,
      nivel: "basico",
    },
    {
      id: 2,
      titulo: "Aprende Algebra",
      tema: "algebra",
      vistas: 15722,
      nivel: "intermedio",
    },
  ],
};

module.exports.infoCursos = infoCursos;

//index.http
//Cursos

GET http://localhost:3000/ HTTP/1.1

###

PUT http://localhost:3000/ HTTP/1.1

###

POST http://localhost:3000/cursos/programacion HTTP/1.1
Content-Type: application/json

{
  "titulo": "Aprende Node.js"
}
